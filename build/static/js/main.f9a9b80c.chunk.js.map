{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","getPiece","x","y","filter","item","checkWin","player","winningMoves","column","checkPiece","push","length","console","log","setState","winner","row","addMove","nextPlayerTurn","availableY","position","concat","this","rowViews","columnViews","piece","onClick","style","width","height","backgroundColor","display","padding","borderRadius","flex","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9a9b80c.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nexport default class App extends React.Component {\n  //set size of grid\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn: 'red', \n  };\n\n  //grab any associated moves with particular row and column\n  getPiece = (x,y) => {\n    const list = this.state.moves.filter((item) => {\n      return(item.x === x && item.y === y);\n\n    });\n\n    return list[0];\n  }\n\n  //checks for win \n  checkWin = (x,y,player) => {\n    let winningMoves = [{x,y}];\n    //check for pieces of same color to right\n    for(let column = x + 1; column < x+4; column += 1){\n      const checkPiece = this.getPiece(column, y);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x: column, y:y});\n      }else{\n        break;\n      }\n    }\n\n    //check for pieces of same color to left\n    for(let column = x - 1; column < x - 4; column -= 1){\n      const checkPiece = this.getPiece(column, y);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x:column,y:y});\n      }else{\n        break;\n      }\n    }\n    \n    //if there are 4 pieces in a row, declare current player as winner\n    if(winningMoves.length === 4){\n      console.log('got a winner!', winningMoves); //remove before submission\n      this.setState({winner:player, winningMoves});\n      return true; \n    }\n\n    winningMoves = [{x,y}];\n    //check for pieces of same color up\n    for(let row = y + 1; row < y+4; row += 1){\n      const checkPiece = this.getPiece(x, row);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x:x, y: row});\n      }else{\n        break;\n      }\n    }\n\n    //check for pieces of same color down\n    for(let row = y - 1; row < y - 4; row -= 1){\n      const checkPiece = this.getPiece(x, row);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x: x, y: row});\n      }else{\n        break;\n      }\n    }\n\n    //if there are 4 pieces in a row, declare current player as winner\n    if(winningMoves.length === 4){\n      console.log('you got a winner!', winningMoves);\n      this.setState({winner:player, winningMoves});\n      return true;\n    }\n  }\n  \n  addMove = (x,y) => {\n    //set variable playerTurn to be current player whose turn it is\n    const {playerTurn} = this.state;\n    //checks whose turn it is, if the playerTurn is red, then yellow is next, otherwise red is next\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    //pieces drop to lowest available slot for that column\n    let availableY = null;\n    for(let position = this.state.rows - 1 ; position >= 0; position--){\n      //if there is nothing at that position, set availableY to that position\n      if(!this.getPiece(x,position)){\n        availableY = position;\n        break;\n      }\n    }\n\n    //if availableY is not equal to null, meaning there is a piece in that position\n    if(availableY !== null){\n      this.setState({moves: this.state.moves.concat({x,y:availableY, player: playerTurn}), playerTurn: nextPlayerTurn}, () => this.checkWin(x,availableY,playerTurn));\n    }\n    //check for a win, based on this move \n    //first set state using this.setState, then use this.checkWin to check for a win\n    this.setState({moves: this.state.moves.concat({x,y,player: playerTurn}), playerTurn: nextPlayerTurn}, () => this.checkWin(x,y, playerTurn));\n  }\n\n  //renderBoard method creates the board\n  renderBoard() {\n    const {rows, columns, winner} = this.state;\n    const rowViews = [];\n\n    //nested for loop to make the grid of size 6x7\n    for(let row =0; row < this.state.rows; row += 1) {\n      const columnViews = [];\n      for(let column = 0; column < this.state.columns; column += 1){\n        const piece = this.getPiece(column, row);\n\n        //set the size of the grid (7vw means 7 view widths so as you zoom in and out, the grid scales to size)\n        columnViews.push(\n          //make the circles inside each cell so the grid looks more realistic\n          <div onClick = {() => {this.addMove(column,row)}} style={{width: '7vw', height: '7vw', backgroundColor: 'blue', display: 'flex', padding: 5}}>\n            <div style = {{borderRadius: '50%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {/*if there is a piece associated the player'c colour will fill it, otherwise return undefined */}\n              {piece ? <div style = {{backgroundColor: piece.player, flex: 1, borderRadius: '50%'}} /> : undefined } \n            </div>\n          </div>\n        );\n      }\n      rowViews.push(\n        <div style={{display: 'flex', flexDirection: 'row'}}> {columnViews}</div>\n      );\n    }\n\n    return(\n      <div style = {{backgroundColor: 'blue', display: 'flex', flexDirection: 'column'}}>\n        {winner && <div style = {{position: 'absolute', left: 0, right: 0, bottom: 0, top: 0, zIndex:3, backgroundColor: 'rgba(0,100,0,.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', color: 'white', fontWeight: '200', fontSize: '8vw'}}>\n          {`${winner} WINS!`}\n          </div>}\n        {rowViews}\n      </div>\n    );\n  }\n  \n  render() {\n    const { style } = this.props;\n    return (\n      <div style={style ? Object.assign({}, styles.container, style) : styles.container}>\n        <div>\n        {this.renderBoard()}\n        </div> \n      </div>  \n    );\n  }\n}\n\n//styles for page, to center grid, etc. \nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}